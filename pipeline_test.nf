#!/usr/bin/env nextflow
nextflow.enable.dsl=2

// TODO UPDATE HELP MESSAGE (new defaults + additional workflow options)
def helpMessage() {
log.info """
        Usage:
        The typical command for running the pipeline is as follows:

        --option                       Description/Notes [default value]

    Mandatory arguments:
        --assemblypath                Directory of your fasta files (full path required) [input_test]
        --hostdata                    CSV file containing assembly filename [input_test/metadata.csv]

        --pv_fasta                    Fasta file of the pv used to train the pv model (generated by previous pipeline)
        --igr_fasta                   Fasta file of the igr sequences used to train the igr model (generated by previous pipeline) 

    Optional arguments:
        --outdir                       Output directory for models & other data [./out]
    
    Hostdata file options:
        --assembly_column              Column name of your assemblies. Must contain extension eg myassembly.fasta ["Filename"]

    Assembly Quality Thresholds:
        --as_ln_upr                    Maximum accepted assembly length [6000000]
        --as_ln_lwr                    Minimum accepted assembly length [4000000]
        --ctg_count                    Minimum accepted number of contigs [500]
        --largest_ctg                  Minimum accepted length of largest contig [100000] 
        --n50                          Minimum accepted n50 [50000]
        --gc_upr                       Maximum accepted GC % [54]
        --gc_lwr                       Minimum accepted GC % [50]

    Tool-specific arguments:
        --prokka_ref                   'Trusted' protein file for prokka (prokka --proteins) [./data/stm_proteinref.fasta]
        --amr_species                  Assembly species for amrfinder (amrfinder -O) ["Salmonella"]
        --snp_ref                      Reference file for snippy (snippy --ref) [/data/stm_sl1344.fasta]
        """
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

// Modules 
include { assembly_qc                 } from "$projectDir/modules/assembly_qc.nf"
include { printqc                     } from "$projectDir/modules/printqc.nf"
include { prokka_annotation           } from "$projectDir/modules/prokka_annotation.nf"
include { amrfinder                   } from "$projectDir/modules/amrfinder.nf"
include { snippy                      } from "$projectDir/modules/snippy.nf"
include { snippy_core                 } from "$projectDir/modules/snippy_core.nf"
include { amr_collect                 } from "$projectDir/modules/amr_collect.nf"
include { amr_process                 } from "$projectDir/modules/amr_process.nf"
include { snp_process                 } from "$projectDir/modules/snp_process.nf"
include { get_igr_fastas              } from "$projectDir/modules/get_igr_fastas.nf"
include { get_pv_fastas               } from "$projectDir/modules/get_pv_fastas.nf"
include { makeblastdb                 } from "$projectDir/modules/makeblastdb.nf"
include { blast as blast_pvs          } from "$projectDir/modules/blast.nf"
include { blast as blast_igrs         } from "$projectDir/modules/blast.nf"

// Reference & R script files
prokka_ref_file = file(params.prokka_ref)
snp_ref_file = file(params.snp_ref)
amr_process_script=file("$projectDir/data/input_amr.R")
snps_process_script=file("$projectDir/data/input_snps.R")

///////////////////////////////     WORKFLOW    ////////////////////////////////////////////////////////////////////////////////////////////
assemblies = Channel.fromPath("${params.assemblypath}/*.${params.fileextension}")
metadata_file = file(params.hostdata)
pv_fasta_file = file(params.pv_fasta)
igr_fasta_file = file(params.igr_fasta)

models = file(params.models)

workflow {
    assembly_qc(assemblies)
    printqc(assembly_qc.out.collectFile(keepHeader:true, skip:1, sort:true,storeDir:"${params.outdir}/good_assemblies"), metadata_file)
    prokka_annotation(printqc.out.good_assemblies.flatten(), prokka_ref_file)

    amrfinder(prokka_annotation.out.annotation, prokka_annotation.out.transl_protein, prokka_annotation.out.nucleotide)
    amr_collect(amrfinder.out.collect())
    amr_process(amr_process_script, amr_collect.out, printqc.out.good_metadata)

    snippy(printqc.out.good_assemblies.flatten(), snp_ref_file)
    snippy_core(snippy.out.collect(), snp_ref_file)
    snp_process(snps_process_script, snippy_core.out.core_snps, printqc.out.good_metadata)

    // Blast pv & igrs
    makeblastdb(printqc.out.good_assemblies)
    blast_pvs(makeblastdb.out.blastdb_dir, pv_fasta_file)
    blast_igrs(makeblastdb.out.blastdb_dir, igr_fasta_file)


    //model_testing( )
}
