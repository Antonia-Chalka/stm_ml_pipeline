#!/usr/bin/env nextflow
nextflow.enable.dsl=2

// TODO UPDATE HELP MESSAGE (new defaults + additional workflow options)
def helpMessage() {
log.info """
        Usage:
        The typical command for running the pipeline is as follows:

        --option                       Description/Notes [default value]

    Mandatory arguments:
        --assemblypath                Directory of your fasta files (full path required) [input_test]
        

        --pv_fasta                    Fasta file of the pv used to train the pv model (generated by previous pipeline)
        --igr_fasta                   Fasta file of the igr sequences used to train the igr model (generated by previous pipeline) 
        --models
        --snp_core_ref

    Optional arguments:
        --outdir                       Output directory for models & other data [./out]
    
    Hostdata file options:
        --assembly_column              Column name of your assemblies. Must contain extension eg myassembly.fasta ["Filename"]

    Assembly Quality Thresholds:
        --as_ln_upr                    Maximum accepted assembly length [6000000]
        --as_ln_lwr                    Minimum accepted assembly length [4000000]
        --ctg_count                    Minimum accepted number of contigs [500]
        --largest_ctg                  Minimum accepted length of largest contig [100000] 
        --n50                          Minimum accepted n50 [50000]
        --gc_upr                       Maximum accepted GC % [54]
        --gc_lwr                       Minimum accepted GC % [50]

    Tool-specific arguments:
        --prokka_ref                   'Trusted' protein file for prokka (prokka --proteins) [./data/stm_proteinref.fasta]
        --amr_species                  Assembly species for amrfinder (amrfinder -O) ["Salmonella"]
        --snp_ref                      Reference file for snippy (snippy --ref) [/data/stm_sl1344.fasta]
        """
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

// Modules 
include { assembly_qc                           } from "$projectDir/modules/assembly_qc.nf"
include { printqc                               } from "$projectDir/modules/printqc.nf"
include { prokka_annotation                     } from "$projectDir/modules/prokka_annotation.nf"
include { amrfinder                             } from "$projectDir/modules/amrfinder.nf"
include { snippy                                } from "$projectDir/modules/snippy.nf"
include { snippy_core                           } from "$projectDir/modules/snippy_core.nf"
include { amr_collect                           } from "$projectDir/modules/amr_collect.nf"  
include { get_igr_fastas                        } from "$projectDir/modules/get_igr_fastas.nf"
include { get_pv_fastas                         } from "$projectDir/modules/get_pv_fastas.nf"
include { makeblastdb                           } from "$projectDir/modules/makeblastdb.nf"
include { blast as blast_pvs                    } from "$projectDir/modules/blast.nf"
include { blast as blast_igrs                   } from "$projectDir/modules/blast.nf"
include { amr_process_test                      } from "$projectDir/modules/amr_process_test.nf"
include { snp_process_test                      } from "$projectDir/modules/snp_process_test.nf"
include { blast_process as blast_process_pv     } from "$projectDir/modules/blast_process.nf"
include { blast_process as blast_process_igr    } from "$projectDir/modules/blast_process.nf"
include { prediction_testing_models             } from "$projectDir/modules/prediction_testing_models"

// R script & reference files
amr_process_script = file("$projectDir/data/input_amr_testing.R")
snps_process_script = file("$projectDir/data/input_snps_testing.R")
blast_process_script = file("$projectDir/data/blast_process.R")
prediction_testing_models_script = file ("$projectDir/data/prediction_testing_models.R")

pv_fasta_file = file(params.pv_fasta)
igr_fasta_file = file(params.igr_fasta)
models_dir = file(params.models)
prokka_ref_file = file(params.prokka_ref)
snp_ref_file = file(params.snp_ref)
snp_core_ref_file = file(params.snp_core_ref)

///////////////////////////////     WORKFLOW    ////////////////////////////////////////////////////////////////////////////////////////////
assemblies = Channel.fromPath("${params.assemblypath}/*.${params.fileextension}")

workflow {
    prokka_annotation(assemblies, prokka_ref_file)
    amrfinder(prokka_annotation.out.annotation, prokka_annotation.out.transl_protein, prokka_annotation.out.nucleotide)
    amr_collect(amrfinder.out.collect())
    amr_process_test(amr_process_script, amr_collect.out) 

    snippy(assemblies, snp_ref_file)
    snippy_core(snippy.out.collect(), snp_ref_file)
    snp_process_test(snps_process_script, snippy_core.out.core_snps, snp_core_ref_file)

    makeblastdb(assemblies.collect())
    blast_pvs(makeblastdb.out.blastdb_dir, pv_fasta_file)
    blast_igrs(makeblastdb.out.blastdb_dir, igr_fasta_file)
    blast_process_pv(blast_process_script, blast_pvs.out.blast_results, "pv")
    blast_process_igr(blast_process_script, blast_igrs.out.blast_results, "igr" )

    prediction_testing_models(
        amr_process_test.out.amr_class_all,
        amr_process_test.out.amr_gene_all,
        blast_process_pv.out,
        blast_process_igr.out,
        snp_process_test.out,
        models_dir,
        prediction_testing_models_script
    )
}
